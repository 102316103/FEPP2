package com.syscom.fep.server.common.parse;

import com.syscom.fep.frmcommon.gui.AbstractFrame;
import com.syscom.fep.frmcommon.gui.AbstractPanel;
import com.syscom.fep.frmcommon.gui.GuiProperties;
import com.syscom.fep.frmcommon.gui.util.GuiUtil;
import com.syscom.fep.frmcommon.util.ReflectUtil;
import com.syscom.fep.frmcommon.util.StringUtil;
import com.syscom.fep.server.common.ServerCommonBaseTest;
import com.syscom.fep.vo.text.atm.ATMTextBase;
import com.syscom.fep.vo.text.atm.request.IWDRequest;
import com.syscom.fep.vo.text.atm.response.IFTResponse;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Test;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class ATMTextParserTest extends ServerCommonBaseTest {
	static {
		System.setProperty("java.awt.headless", "false");
	}

	private final String message =
			

	@Test
	public void testParse() throws Exception {
		IWDRequest expected = new IWDRequest();
		expected.setTXCD("495744");
		IWDRequest actual = (IWDRequest) ATMTextParser.getInstance().parse(message.substring(24));
		assertEquals(expected.getTXCD(), actual.getTXCD());
	}

	@Test
	public void testParseIFTResponse() throws Exception {
		String message =
				

		message =
				

		IFTResponse resp = new IFTResponse();
		resp.parseFlatfile(message.substring(24));

	}

	@Test
	public void testATMTextParse() throws InterruptedException {
		new AtmTextParseFrame("ATM Text Parse Frame").showFrame();
		while (true) {
			Thread.sleep(24 * 60 * 60 * 60 * 1000);
		}
	}

	private static class AtmTextParseFrame extends AbstractFrame {
		private static final long serialVersionUID = 1L;

		public AtmTextParseFrame(String title) {
			super(title);
		}

		@Override
		protected Component guiLayout() {
			AtmTextParsePanel jmsPanel = new AtmTextParsePanel();
			return jmsPanel;
		}

		@Override
		protected JMenuBar createMenuBar() {
			return null;
		}
	}

	private static class AtmTextParsePanel extends AbstractPanel {
		private static final long serialVersionUID = 1L;

		private JButton parseBtn;
		private JTextArea messageInputArea, messageParsedArea;

		@Override
		protected void initComponents() {
			ActionLster listener = new ActionLster();
			parseBtn = GuiUtil.createButton("拆解", listener);
			messageInputArea = GuiUtil.createTextArea(
					
					null, true);
			messageInputArea.setRows(5);
			messageParsedArea = GuiUtil.createTextArea(StringUtils.EMPTY, null, false);
		}

		@Override
		protected Component guiLayout() {
			JPanel contentPane = GuiUtil.createPanel(new GridBagLayout());
			contentPane.setBorder(GuiUtil.createLineBorder(GuiProperties.CLR_BORDER));

			contentPane.add(GuiUtil.createLabel("Input Message"), new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.EAST, GridBagConstraints.NONE,
					GuiUtil.createInsets(GuiProperties.GAP, GuiProperties.GAP, GuiProperties.GAP, GuiProperties.GAP), 0, 0));
			contentPane.add(new JScrollPane(messageInputArea), new GridBagConstraints(1, 0, 1, 1, 1.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.BOTH,
					GuiUtil.createInsets(GuiProperties.GAP, 0, GuiProperties.GAP, GuiProperties.GAP), 0, 0));

			contentPane.add(GuiUtil.createLabel("Parse Result"), new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.EAST, GridBagConstraints.NONE,
					GuiUtil.createInsets(0, GuiProperties.GAP, GuiProperties.GAP, GuiProperties.GAP), 0, 0));
			contentPane.add(new JScrollPane(messageParsedArea), new GridBagConstraints(1, 1, 1, 1, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.BOTH,
					GuiUtil.createInsets(0, 0, GuiProperties.GAP, GuiProperties.GAP), 0, 0));

			JPanel btnPane = GuiUtil.createPanel(new FlowLayout(FlowLayout.RIGHT, GuiProperties.GAP, 0));
			btnPane.add(parseBtn);
			contentPane.add(btnPane, new GridBagConstraints(0, 2, 2, 1, 1.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL,
					GuiUtil.createInsets(0, GuiProperties.GAP, GuiProperties.GAP, GuiProperties.GAP), 0, 0));
			return contentPane;
		}

		final class ActionLster implements ActionListener {

			@Override
			public void actionPerformed(ActionEvent e) {
				if (parseBtn.equals(e.getSource())) {
					String message = messageInputArea.getText();
					if (StringUtils.isBlank((String) message)) {
						String errorMessage = "請輸入訊息";
						showErrorMessage(errorMessage);
						GuiUtil.showErrorMessage(AtmTextParsePanel.this, "錯誤", errorMessage);
						messageInputArea.requestFocus();
						return;
					}
					StringBuilder sb = new StringBuilder();
					try {
						ATMTextBase atmBase = ATMTextParser.getInstance().parse(message.substring(24));
						sb.append(atmBase.getClass().getName()).append(":\r\n");
						Field[] fields = atmBase.getClass().getDeclaredFields();
						if (ArrayUtils.isNotEmpty(fields)) {
							for (Field field : fields) {
								Object value = ReflectUtil.getFieldValue(atmBase, field, null);
								if (value instanceof String)
									sb.append(field.getName()).append("[ascii value] = ").append(value == null ? "[NO DATA]" : StringUtils.join(value, "[", StringUtil.fromHex((String) value), "]"))
											.append("\r\n");
								else
									sb.append(field.getName()).append("=").append(value == null ? "[NO DATA]" : value);
							}
						}
					} catch (Exception ex) {
						GuiUtil.showErrorMessage(AtmTextParsePanel.this, "錯誤", ex.getMessage());
					} finally {
						messageParsedArea.setText(sb.toString());
					}
				}
			}
		}
	}
}
