package com.syscom.fep.frmcommon.ebcdic;

import com.syscom.fep.frmcommon.log.LogHelper;
import com.syscom.fep.frmcommon.util.ConvertUtil;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Test;

import java.io.UnsupportedEncodingException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class EbcdicConverterTest {
    private LogHelper logger = new LogHelper();

    @Test
    public void testToString() {
        // CCSID=837編碼漢字部分
        // 0x57, 0xD1, 0x50, 0xB3, 0x5C, 0x74
        byte[] data1 = ConvertUtil.hexToBytes("57D150B35C74");
        logger.info("data1 = " + StringUtils.join(data1, ','));
        // CCSID=37編碼非漢字部分
        // 0xC9, 0xC2, 0xD4;
        byte[] data2 = ConvertUtil.hexToBytes("C9C2D4");
        logger.info("data2 = " + StringUtils.join(data1, ','));
        CCSID ccsid1 = CCSID.Simplified_Chinese;
        CCSID ccsid2 = CCSID.English;
        String str1 = EbcdicConverter.toString(ccsid1, data1);
        String str2 = EbcdicConverter.toString(ccsid2, data2);
        logger.info("str1 = " + str1);
        logger.info("str2 = " + str2);
        assertEquals("我來自IBM", str1 + str2);
        String test1 = EbcdicConverter.toHex(CCSID.English, "6B2D22B850172468".length(), "6B2D22B850172468");
        String value
        value.subSequence(146, 150);
        logger.info(EbcdicConverter.fromHex(CCSID.English, "F0F1F2"));

    }

    @Test
    public void testIbm2Java() {
        CCSID ccsid1 = CCSID.Traditional_Chinese;
        CCSID ccsid2 = CCSID.English;
        String s = "F1F1F1F0F8F0F1F0F97AF4F47AF3F640404040404040404040404040404040C4F1F0F2F1F0F0F0F0F2F2F0F3F0F060F0F3F1F7F2F1F0404040C4E3D90E5A615D7C5D9254E80F4040404040404040404040404040F0F2F1F9F9F0F060F2F1F4F4F0F1F6404040404040404040404040404040404040F0F2F1F1F8F0F0F2F1F4F5F64040404040404040405BF36BF0F3F04BF0F0404040404040404040404040404040404040404040";
        logger.info(s);

        byte[] data1 = ConvertUtil.hexToBytes(s.substring(0, 122));
        logger.info(ConvertUtil.toHex(data1));
        //IBM data to Java String
        String str1 = EbcdicConverter.toString(ccsid2, data1);
        logger.info("{" + str1 + "}");

        byte[] data3 = ConvertUtil.hexToBytes(s.substring(122, 138));
        logger.info(ConvertUtil.toHex(data3));
        //IBM data to Java String
        String str3 = EbcdicConverter.toString(ccsid1, data3);
        logger.info("{" + str3 + "}");

        byte[] data5 = ConvertUtil.hexToBytes(s.substring(138));
        logger.info(ConvertUtil.toHex(data5));
        //IBM data to Java String
        String str5 = EbcdicConverter.toString(ccsid2, data5);
        logger.info("{" + str5 + "}");

        logger.info("{" + str1 + str3 + str5 + "}");
    }

    @Test
    public void testIbmConvertJava() throws UnsupportedEncodingException {
        CCSID ccsid1 = CCSID.English; // CCSID=37編碼非漢字部分
        CCSID ccsid2 = CCSID.Traditional_Chinese; // CCSID=835編碼漢字部分 Traditional Chinese - including 6204 UDC 中文字符集，雙字節
        CCSID ccsid3 = CCSID.Simplified_Chinese; // CCSID=837編碼漢字部分 Simplified Chinese - including 1880 UDC  中文字符集，雙字節

        String s00 = "IBM";
        //Java String to IBM data
        byte[] bytes00 = EbcdicConverter.toBytes(ccsid1, 3, s00);
        String s01 = ConvertUtil.toHex(bytes00);
        //IBM data to Java String
        String s02 = EbcdicConverter.toString(ccsid1, bytes00);
        logger.info(s00 + "------->" + s01 + "------->" + s02);

        String s10 = "我來自";
        //Java String to IBM data
        byte[] bytes10 = EbcdicConverter.toBytes(ccsid3, 6, s10);
        String s11 = ConvertUtil.toHex(bytes10);
        //IBM data to Java String
        String s12 = EbcdicConverter.toString(ccsid3, bytes10);
        logger.info(s10 + "------->" + s11 + "------->" + s12);

        String s20 = "編碼漢字部分";
        //Java String to IBM data
        byte[] bytes20 = EbcdicConverter.toBytes(ccsid2, 12, s20);
        String s21 = ConvertUtil.toHex(bytes20);
        //IBM data to Java String
        String s22 = EbcdicConverter.toString(ccsid2, bytes20);
        logger.info(s20 + "------->" + s21 + "------->" + s22);
    }

    @Test
    public void test() {
        logger.info(EbcdicConverter.fromHex(CCSID.English, "F0F1F2"));
    }

    @Test
    public void test2() {
        logger.info(EbcdicConverter.fromHex(CCSID.Traditional_Chinese, "0E5A615D7C5D9254E80F"));
        logger.info(EbcdicConverter.fromHex(CCSID.Traditional_Chinese, "5A615D7C5D9254E8"));
        logger.info(EbcdicConverter.fromHex(CCSID.Traditional_Chinese, "0E528B4CC14C4B574850FB"));
        logger.info(EbcdicConverter.fromHex(CCSID.Traditional_Chinese,


        String hex
        byte[] bytes = ConvertUtil.hexToBytes(hex);
        try {
            String ascii = new String(bytes, "Cp1047");
            logger.info(ascii);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void test3() {
        String hostIp = StringUtils.rightPad("127.0.0.1", 15);
        logger.info(hostIp);
        String ebcdicForHostIp = EbcdicConverter.toHex(CCSID.English, hostIp.length(), hostIp);
        logger.info(ebcdicForHostIp);
    }

    @Test
    public void test4() {
        String ibmHex = "6FF1F16F6F6F";
        String javaHex = EbcdicConverter.iHexToJHex(CCSID.English, ibmHex);
        logger.info("IBM Hex To Java Hex = ", javaHex);
        logger.info("Java Hex To IBM Hex = ", EbcdicConverter.jHexToIHex(CCSID.English, 6, javaHex));
    }

    @Test
    public void test5() {
        String ibmHex
        String java = EbcdicConverter.fromWholeHex(ibmHex);
        logger.info(java);
    }

    @Test
    public void test6() {
        String ibmHex = "F0F2F1F0F1F1F1F2F5F5F0F9F9F4F4F0F1F1F0F0F0F0F9F5F0F0F0F0F0F1F2F0F6F0F1F1F4F0F1F0F2F0F0F0F100000000F0F0F0F0F0F0F0F0F0F0F1F0F0F1F0F0F0F0F0F0F1F0F040404040F1F0F0F1F0F0F0F0F200000000";
        String java = EbcdicConverter.fromWholeHex(ibmHex);
        logger.info(java);
        logger.info(java.length());
        int star = 0;
        logger.info("訊息類別代碼:" + java.substring(star, star + 4));//訊息類別代碼 0210
        star = star + 4;
        logger.info("交易類別代碼:" + java.substring(star, star + 4));//交易類別代碼
        star = star + 4;
        logger.info("查詢序號:" + java.substring(star, star + 7));//查詢序號 0110000
        star = star + 7;
        logger.info("收信單位代號:" + java.substring(star, star + 7));//收信單位代號 0110000
        star = star + 7;
        logger.info("發信單位代號:" + java.substring(star, star + 7));//發信單位代號 9500000
        star = star + 7;

        logger.info("交易啟動日期及時間:" + java.substring(star, star + 12));//交易啟動日期及時間 YYMMDDHHMMSS
        star = star + 12;
        logger.info("回應代碼:" + java.substring(star, star + 4));//回應代碼
        star = star + 4;
        logger.info("交換基碼同步查詢 :" + EbcdicConverter.toHex(CCSID.English, 4, java.substring(star, star + 4)));//交換基碼同步查詢 HEX"00000000"
        star = star + 4;
        logger.info("交易金額:" + java.substring(star, star + 14));//交易金額
        star = star + 14;
        logger.info("電文序號:" + java.substring(star, star + 7));//電文序號
        star = star + 7;

        logger.info("通匯狀況代號 :" + java.substring(star, star + 2));//通匯狀況代號
        star = star + 2;
        logger.info("主機回應碼 :" + java.substring(star, star + 4));//主機回應碼
        star = star + 4;
        logger.info("主機處理流程 :" + java.substring(star, star + 1));//主機處理流程
        star = star + 1;
        logger.info("櫃員代號 :" + java.substring(star, star + 6));//櫃員代號
        star = star + 6;
        logger.info("通匯代解行 :" + java.substring(star, star + 2));//通匯代解行
        star = star + 2;

        logger.info("財金押基碼 :" + EbcdicConverter.toHex(CCSID.English, 4, java.substring(star, star + 4)));//財金押基碼 HEX"00000000"
    }

    @Test
    public void test7() {
        String ebcdic = "0E5841404040404D920F";
        logger.info("前後帶OEOF轉中文：", EbcdicConverter.fromWholeHex(ebcdic));

        ebcdic = "5841404040404D92";
        logger.info("前後沒有帶OEOF轉中文：", EbcdicConverter.fromHex(CCSID.Traditional_Chinese, ebcdic));

        String plain = "理　　由"; // 中間有兩個全角空白
        logger.info("轉EBCDIC，轉出為8個byte：", EbcdicConverter.toHex(CCSID.Traditional_Chinese, 8, plain));

        logger.info("轉EBCDIC，轉出為9個byte：", EbcdicConverter.toHex(CCSID.Traditional_Chinese, 9, plain));

        plain = "理由"; // 無全角空白
        logger.info("轉EBCDIC，轉出為4個byte：", EbcdicConverter.toHex(CCSID.Traditional_Chinese, 4, plain));

        logger.info("轉EBCDIC，轉出為5個byte：", EbcdicConverter.toHex(CCSID.Traditional_Chinese, 5, plain));
    }

    @Test
    public void test8(){
        String ihex = "00B1";
        logger.info(EbcdicConverter.fromHex(CCSID.English, ihex));
    }
}
