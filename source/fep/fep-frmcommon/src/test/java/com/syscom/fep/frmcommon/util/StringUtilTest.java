package com.syscom.fep.frmcommon.util;

import com.syscom.fep.frmcommon.esapi.ESAPIConfiguration;
import com.syscom.fep.frmcommon.log.LogHelper;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Test;
import org.owasp.esapi.ESAPI;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class StringUtilTest {
    private LogHelper logger = new LogHelper();

    @Test
    public void testToHex() {
        assertEquals("313233303030", StringUtil.toHex("123000"));
        assertEquals("414243444546", StringUtil.toHex("ABCDEF"));
        assertEquals("40212324255E262A", StringUtil.toHex("@!#$%^&*"));
//        logger.info(StringUtil.toHex("003810072603957022000200000000001220021625"));
//        logger.info(StringUtil.toHex("0030100726039570220002030400015000"));
//        logger.info(StringUtil.toHex(StringUtils.repeat(StringUtils.SPACE, 4)));
        String ii
        ii.substring(758, 762);
        if(ii.length() >= 1000) {
        	ii = ii.substring(0,1000);
        }
        ii.toCharArray();
    }

    @Test
    public void testFromHex() throws DecoderException {
        System.out.println(StringUtil.fromHex("6d6573736167654964"));

        assertEquals("123000", StringUtil.fromHex("313233303030"));
        assertEquals("ABCDEF", StringUtil.fromHex("414243444546"));
        assertEquals("@!#$%^&*", StringUtil.fromHex("40212324255E262A"));
        assertEquals("020025232875880807000080600000705171504400000",
                StringUtil.fromHex("303230303235323332383735383830383037303030303830363030303030373035313731353034343030303030"));
        logger.info(StringUtil.fromHex(

        logger.info(StringUtil.fromHex(

        logger.info(StringUtil.fromHex("3345343731393245"));
        logger.info(StringUtil.fromHex("313131303034303033373134343530353045313232323430323732393230"));

        logger.info(StringUtil.fromHex("4646464242464332"));
        logger.info(StringUtil.fromHex("3344343246413735"));

        logger.info("3546363738453841, ", StringUtil.fromHex("3546363738453841"));
        logger.info("3443303237324332, ", StringUtil.fromHex("3443303237324332"));

        System.out.println(StringUtil.fromHex(
                "000000303230303235303032383735383538383037303030303830363030303030373035313731333236333830303030AD58794D04A00010000013013931303332412020303030303035333230343330323641323630313130303033393030343030303033333933303339303034303030303333393330313030353038383036323739393230000A4C8168BCC6AA4D4DD279A822"));
    }

    @Test
    public void testConvertFromAnyBaseString() {
//        assertEquals("45258", StringUtil.convertFromAnyBaseString("b0ca", 16, 10, 0));
//        assertEquals("1011000011001010", StringUtil.convertFromAnyBaseString("b0ca", 16, 2, 0));
//        assertEquals("130312", StringUtil.convertFromAnyBaseString("b0ca", 16, 8, 0));
//        logger.info(DigestUtils.sha256Hex("richard"));
//        logger.info(StringUtil.convertFromAnyBaseString("0010010010100000001000000000000000000000000000000001001100000001", 2, 16, 16));
//        logger.info("2004400400002801 = ", StringUtil.convertFromAnyBaseString("2004400400002801", 16, 2, 64));

        logger.info(StringUtil.convertFromAnyBaseString("DC1B92E653621A4F", 16, 8, 0));
    }

    @Test
    public void testRandom() {
        logger.info(StringUtil.random(5));
        logger.info(StringUtil.random(10));
        logger.info(StringUtil.random(15));
        logger.info(StringUtil.random(20));

        logger.info(String.format("%02X", 70));
        logger.info(Integer.parseInt(String.format("%02X", 70), 16));
    }

    @Test
    public void test() throws UnsupportedEncodingException {
        byte[] bytes = "Richard".getBytes(StandardCharsets.UTF_8);
        logger.info(StringUtil.toHex(bytes));
        logger.info(ConvertUtil.toHex(bytes));
    }

    @Test
    public void test2() {
        ESAPIConfiguration.init();
        ESAPI.validator().isValidURI("", "", true);
    }

    @Test
    public void test3() {
        logger.info("3059822488L/1024 = " + Long.valueOf(3059822488L).intValue());
        logger.info("3059822488L/1024 = " + Long.valueOf(3059822488L).intValue() / 1024);
    }

    @Test
    public void test4() throws DecoderException {
        logger.info(StringUtil.fromHex("49443D312C4970414444523D3132372E302E302E312C706F72743D313530302C5374617475733D313B49443D312C4970414444523D3132372E302E302E312C706F72743D313530312C5374617475733D313B"));
        logger.info(StringUtil.toHex("ID=2,IpADDR=127.0.0.1,port=1500,Status=1;"));
        logger.info(StringUtil.toHex("ID=1,IpADDR=10.0.13.141,port=1500,Status=1;ID=1,IpADDR=10.0.13.142,port=1500,Status=1;"));
    }

    @Test
    public void testSplit() {
        String str = "a@123.com;b@123.com,c@123.com;d@123.com,e@123.com;f@123.com,;g@123.com;,;h@123.com";
        logger.info(StringUtil.split(str, ';', ','));
        str = "a@123.com";
        logger.info(StringUtil.split(str, ';', ','));
    }

    @Test
    public void test12(){
        logger.info(StringUtils.rightPad("123456",  10, '0'));
    }
}
